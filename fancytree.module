<?php
/**
 * Implementation of @link (hook_libraries_info(), http://drupalcontrib.org/api/drupal/contributions%21libraries%21libraries.api.php/function/hook_libraries_info/7)
 * @return array() of library definitions
 */
function fancytree_libraries_info(){
  $theme = variable_get('fancytree_theme', 'win8');
  $libraries['fancytree'] = array(
      'name' => 'jQuery Fancytree',
      'vendor url' => 'https://github.com/mar10/fancytree',
      'dependencies' => array('json2'),
      'download url' => 'https://github.com/mar10/fancytree/releases/download/v2.0.0-2/jquery.fancytree-2.0.0-2.zip',
      'version arguments' => array(
          'file' => 'jquery.fancytree.min.js',
          'pattern' => '@(?i:jQuery Fancytree Plugin) - v([0-9\.\-a-z]+)@',
          'lines' => 2
      ),
      'files' => array(
          'js' => array('jquery.fancytree-all.min.js'),
          'css' => array('skin-' . $theme . '/ui.fancytree.css'),
      ),
      'variants' => array(
          'minified' => array(
              'files' => array(
                  'js' => array(
                      'jquery.fancytree.min.js',
                  ),
              ),
          ),
          'source' => array(
              'files' => array(
                  'js' => array(
                      'jquery.fancytree.js',
                  ),
              ),
          ),

          'all_source' => array(
              'files' => array(
                  'js' => array(
                      'jquery.fancytree-all.js',
                  ),
              ),
          ),
          'all_min' => array(
              'files' => array(
                  'js' => array(
                      'jquery.fancytree-all.min.js',
                  ),
              ),
          ),
      ),
      'integration files' => array(
          'fancytree' => array(
              'js' => array('fancytree.js'),
          ),
      ),
  );

  return $libraries;
}
function fancytree_element_info(){
  /*
   *
  * Config from http://wwwendt.de/tech/fancytree/demo/sample-configurator.html
  *
  * $("#selector").fancytree({
      aria: true, // Enable WAI-ARIA support.
      autoCollapse: true, // Automatically collapse all siblings, when a node is expanded.
      autoScroll: true, // Automatically scroll nodes into visible area.
      checkbox: true, // Show checkboxes.
      debugLevel: 2, // 0:quiet, 1:normal, 2:debug
      generateIds: true, // Generate id attributes like <span id='fancytree-id-KEY'>
      idPrefix: "", // Used to generate node id´s like <span id='fancytree-id-<key>'>.
      selectMode: 3, // 1:single, 2:multi, 3:multi-hier
      tabbable: false // Whole tree behaves as one single control
      });
  *
  *
  */

  $element_types['fancytree'] = array(
      '#input' => TRUE,
      '#multiple' => TRUE,
      '#disabled' => FALSE,
      '#default_value' => array(),
      '#attached' => array(
          'libraries_load' => array(
              array(
                  'fancytree'
            ),
          ),
      ),
      '#theme_wrappers' => array('form_element'),
      '#process' => array('fancytree_process_input'),
      '#element_validate' => array('fancytree_validate'),
      '#theme' => 'fancytree',
  );
  // * Config from http://wwwendt.de/tech/fancytree/demo/sample-configurator.html
  $settings = array(
      'aria' => TRUE, // Enable WAI-ARIA support.
      'autoCollapse' => TRUE, // Automatically collapse all siblings, when a node is expanded.
      'autoScroll' => TRUE, // Automatically scroll nodes into visible area.
      'checkbox' => TRUE, // Show checkboxes.
      'debugLevel' => 2, // 0:quiet, 1:normal, 2:debug
      'generateIds' => TRUE, // Generate id attributes like <span id='fancytree-id-KEY'>
      'idPrefix' => "fancytree-id", // Used to generate node id´s like <span id='fancytree-id-<key>'>.
      'selectMode' => 3, // 1:single, 2:multi, 3:multi-hier
      'extensions' => array('filter'),
      'filter' => array(
        'mode' => 'hide',
        ),
      );
  $element_types['fancytree']['#attached']['js'][] = array(
  'data' => array('fancytree' => $settings),
  'type' => 'setting'
);
  return $element_types;
}
function fancytree_validate($element, &$form_state){
  dsm($element);
  dsm($form_state);

}
function theme_fancytree($variables){
  $element = $variables['element'];
  $output = "<div class=\"fancytree-wrapper\">\n";
  $output .= drupal_render_children($element) . "\n";
  $output .= "</div>\n";
  return $output;
}
function fancytree_theme(){
  return array(
      'fancytree' => array(
          'render element' => 'element',
      ),
  );
}
function fancytree_process_input($element, &$form_state){
  $element['#process_called'] = TRUE;
  $element['#tree'] = TRUE;
/*  $element['filter'] = array(
      '#type' => 'textfield',
      '#title' => t('Filter'),
      '#description' => t('Filter values'),
      '#attributes' => array('placeholder' => t('Filter')),
  );*/
  $value = array();
  $tree = fancytree_walk($element['#options'], $element['#default_value'], $value);
  $json = drupal_json_encode($tree);
  $tree = '<div class="fancytree" data-type="json">' . $json . '</div>';

  $element['value'] = array(
      '#type' => 'textfield',
      '#title' => 'value',
      '#maxlength' => 1024 * 1024 * 1024,
      '#default_value' => drupal_json_encode($value),
      '#suffix' => $tree,
  );
  return $element;
}
function fancytree_walk($tree = array(), $values = array(), &$selected_nodes = array(), $parent = ''){
  $nodes = array();
  foreach ($tree as $key => $branch){
    if($key == '#title'){
      //this value has already been attached to the parent
      continue;
    }
    $selected = FALSE;
    if(is_array($values)){
      if(isset($values[$key]) && $values[$key]){
        $selected = TRUE;
      }
    } else {
      $selected = $values;
    }
    $node = array(
      'selected' => $selected,
      'key' => $parent . '|' .$key,
      );
    if(is_array($branch)){
      $node['title'] = $branch['#title'] ? $branch['#title'] : $key;
      $node['folder'] = TRUE;

      $node['children'] = fancytree_walk($branch, isset($values[$key]) ? $values[$key] : $selected, $selected_nodes, $key);
    }else{
      $node['title'] = $branch;// = array('title' => $branch, 'key' => 'node|'.$depth.'|'.$key);
    }
    if($node['selected']){
      $selected_nodes[] = $node['key'];
    }
    $nodes[] = $node;
  }
  return $nodes;
}
function fancytree_block_info(){
  return array(
      'test' => array(
          'info' => t('Fancytree Test'),
      ),
  );
}

function fancytree_block_view($delta = ''){
  $block = array();
  switch($delta){
    case 'test':
      $block['subject'] = t('Test Fancytree');
      $block['content'] = drupal_get_form('fancytree_test_form');
      break;
    default:
      break;
  }
  return $block;
}
function fancytree_test_form($form, &$form_state){
  $options =   array(
  // -- First option group
  'image_galleries' => array(
    '#title' => 'Image Galleries',
    1 => 'Book Covers',
    2 => 'Movie Posters',
    3 => 'Illustrations',
  ),
  // -- Second option group
  'authors' => array(
    4 => 'Arthur C. Clark',
    5 => 'Frank Herbert',
    // ...
    9 => 'Robert Heinlein',
    '#title' => 'Authors',
  ),
  // -- Third option group
  'genres' => array(
    '#title' => 'Genres',
    10 => 'Alien Invasion',
    15 => 'Space Wars',
     'authors' => array(
      4 => 'Arthur C. Clark',
      5 => 'Frank Herbert',
      // ...
      9 => 'Robert Heinlein',
      '#title' => 'Authors',
    ),
  ),
);
  $form['test'] = array(
      '#type' => 'fancytree',
      '#title' => 'Fancytree Test',
      '#options' => $options,
      '#default_value' => array(
        'image_galleries' => array(
          2 => TRUE
          ),
        'authors' => TRUE),
      '#description' => t('You can test the fanciness of this tree here'),
  );
  $form['submit'] = array(
      '#type' => 'submit',
      // #value is the text to display inside the button
      '#value' => t('Submit'),
  );
  return $form;
}
